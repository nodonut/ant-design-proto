{"version":3,"sources":["comps/HeaderComp.js","comps/SelectComp.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Layout","Title","Typography","headerStyle","display","justifyContent","alignItems","paddingTop","paddingBottom","HeaderComp","menu","className","Item","target","style","color","marginTop","src","height","width","theme","mode","defaultSelectedKeys","margin","overlay","onClick","e","preventDefault","DownOutlined","client","ApolloClient","uri","cache","InMemoryCache","dataTable","Option","Select","OptGroup","children","key","title","dataIndex","sorter","a","b","name","length","sortDirections","render","theImageURL","columnTitles","SelectComp","state","columns","filteredCols","defaultValue","columnIds","data","pagination","current","loading","buckets","searchInput","countries","category","airlineCols","handleChange","value","setState","filter","column","includes","this","loadData","populateBuckets","populateCountrySelect","num","query","gql","variables","page","then","result","console","log","totalPage","companies","paginatorInfo","total","forEach","company","toLowerCase","push","id","rating","imageurl","logo","thermal_screening","CheckCircleTwoTone","twoToneColor","face_masks","hand_sanitizer","ExclamationCircleTwoTone","health_dec_form","test_bucket_parameter","pageSize","currentData","therm_screen","hand_san","currentBucket","bucket","parameters","param","replace","group","paramOptions","label","slice","catch","err","curCountry","country","index","props","marginBottom","placeholder","onChange","showSearch","onSearch","selectCountrySearch","bordered","left","handleSearch","dataSource","handleTableChange","Component","Footer","Content","App","padding","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2063c7c9.chunk.js","sourcesContent":["import React from 'react';\nimport { Menu, Layout, Typography, Dropdown, Image } from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\n\nconst { Header } = Layout;\nconst { Title } = Typography;\n\nconst headerStyle = {\n  display: 'flex',\n  justifyContent: 'flex-start',\n  alignItems: 'center',\n  paddingTop: '2em',\n  paddingBottom: '2em',\n};\n\nfunction HeaderComp() {\n  const menu = (\n    <Menu className={'categories'}>\n      <Menu.Item>\n        <a target='_blank'>Airlines</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Airports</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Hotels</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Mobility</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Activities/Events</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Amusement Parks</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Museums</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Cruises</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Short Term Rentals</a>\n      </Menu.Item>\n    </Menu>\n  );\n  return (\n    <Header style={headerStyle}>\n      <Title style={{ color: 'whitesmoke', marginTop: '0.5em' }}>\n        <Image\n          src='https://app.safetravelbarometer.com/images/logos/stb-white-250-63.png'\n          height={40}\n          width={170}\n        />\n      </Title>\n      <Menu\n        theme='dark'\n        mode='horizontal'\n        defaultSelectedKeys={['1']}\n        style={{ margin: '2em 2em' }}\n      >\n        <Menu.Item key='1'>Dashboard</Menu.Item>\n      </Menu>\n      <Dropdown overlay={menu}>\n        <a className='ant-dropdown-link' onClick={(e) => e.preventDefault()}>\n          Categories <DownOutlined />\n        </a>\n      </Dropdown>\n      ,\n    </Header>\n  );\n}\n\nexport default HeaderComp;\n","import React, { Component } from 'react';\nimport { Select, Table, Input, Tooltip } from 'antd';\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport {\n  CheckCircleTwoTone,\n  ExclamationCircleTwoTone,\n} from '@ant-design/icons';\n\n///////////////////////////\nconst client = new ApolloClient({\n  uri: 'https://dev.app.safetravelbarometer.com/api',\n  cache: new InMemoryCache(),\n});\nconst dataTable = [];\n\n///////////////////////////\nconst { Option, OptGroup } = Select;\n\nconst children = [\n  {\n    key: '01',\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.length - b.name.length,\n    sortDirections: ['descend'],\n  },\n  {\n    key: '02',\n    dataIndex: 'imageurl',\n    render: (theImageURL) => <img src={theImageURL} />,\n  },\n  {\n    key: '03',\n    title: 'Rating',\n    dataIndex: 'rating',\n  },\n];\n\nconst paramContainer = [];\nlet cat = '';\nlet columnTitles = [];\nlet pageNumber = 1;\n\nclass SelectComp extends Component {\n  state = {\n    columns: [...children],\n    filteredCols: [],\n    defaultValue: [],\n    columnIds: [],\n    data: [],\n    pagination: {\n      current: 1,\n    },\n    loading: false,\n    buckets: [],\n    searchInput: '',\n    countries: [],\n    category: 'airlines',\n    airlineCols: [],\n  };\n\n  componentDidMount() {\n    this.loadData();\n    this.populateBuckets();\n    this.populateCountrySelect();\n  }\n\n  loadData(num = 1) {\n    this.setState({ loading: true });\n    const query = gql`\n      query companies($page: Int!) {\n        companies(page: $page, first: 100) {\n          paginatorInfo {\n            perPage\n            hasMorePages\n            currentPage\n            total\n          }\n          data {\n            id\n            name\n            logo\n            rating\n            category {\n              id\n              name\n            }\n            company_parameter_values_for_employee {\n              parameter {\n                role\n                name\n              }\n            }\n          }\n        }\n      }\n    `;\n    client\n      .query({\n        query: query,\n        variables: {\n          page: num,\n        },\n      })\n      .then((result) => {\n        console.log(result);\n        let totalPage = result.data.companies.paginatorInfo.total;\n        result.data.companies.data.forEach((company) => {\n          if (company.category.name.toLowerCase() === this.state.category) {\n            return dataTable.push({\n              key: company.id,\n              rating: company.rating,\n              imageurl: company.logo,\n              name: company.name,\n              category: company.category.name,\n              thermal_screening: <CheckCircleTwoTone twoToneColor='#52c41a' />,\n\n              face_masks: <CheckCircleTwoTone twoToneColor='#52c41a' />,\n              hand_sanitizer: (\n                <ExclamationCircleTwoTone twoToneColor='orange' />\n              ),\n              health_dec_form: (\n                <ExclamationCircleTwoTone twoToneColor='orange' />\n              ),\n              test_bucket_parameter: (\n                <ExclamationCircleTwoTone twoToneColor='orange' />\n              ),\n            });\n          }\n        });\n        this.setState({\n          category: cat,\n          loading: false,\n          data: dataTable,\n          pagination: {\n            total: totalPage,\n          },\n        });\n      });\n  }\n\n  handleTableChange(page) {\n    const query = gql`\n      query companies($page: Int!, $pageSize: Int!) {\n        companies(page: $page, first: $pageSize) {\n          paginatorInfo {\n            perPage\n            hasMorePages\n            currentPage\n            total\n          }\n          data {\n            id\n            name\n            rating\n            company_parameter_values_for_employee {\n              parameter {\n                role\n                name\n              }\n            }\n          }\n        }\n      }\n    `;\n    client\n      .query({\n        query: query,\n        variables: {\n          page: page.current,\n          pageSize: page.pageSize,\n        },\n      })\n      .then((result) => {\n        let totalPage = result.data.companies.paginatorInfo.total;\n        let currentData = [];\n        result.data.companies.data.forEach((company) => {\n          return currentData.push({\n            key: company.id,\n            rating: company.rating,\n            name: company.name,\n            therm_screen: <CheckCircleTwoTone twoToneColor='#52c41a' />,\n            face_masks: <CheckCircleTwoTone twoToneColor='#52c41a' />,\n            hand_san: <ExclamationCircleTwoTone twoToneColor='orange' />,\n            health_dec_form: <ExclamationCircleTwoTone twoToneColor='orange' />,\n          });\n        });\n        this.setState({\n          loading: false,\n          data: currentData,\n          pagination: {\n            total: totalPage,\n          },\n        });\n      });\n  }\n\n  // sorterFunctionASC() {\n  //   client\n  //     .query({\n  //       query: gql`\n  //         query {\n  //           companies(orderBy: { field: NAME, order: ASC }, first: 100) {\n  //             paginatorInfo {\n  //               perPage\n  //               hasMorePages\n  //               currentPage\n  //               total\n  //             }\n  //             data {\n  //               id\n  //               name\n  //               rating\n  //               company_parameter_values_for_employee {\n  //                 parameter {\n  //                   role\n  //                   name\n  //                 }\n  //               }\n  //             }\n  //           }\n  //         }\n  //       `,\n  //     })\n  //     .then((result) => {\n  //       console.log(result);\n  //       let totalPage = result.data.companies.paginatorInfo.total;\n  //       let currentData = [];\n  //       result.data.companies.data.forEach((company) => {\n  //         return currentData.push({\n  //           key: company.id,\n  //           rating: company.rating,\n  //           name: company.name,\n  //           therm_screen: <CheckCircleTwoTone twoToneColor='#52c41a' />,\n  //           face_masks: <CheckCircleTwoTone twoToneColor='#52c41a' />,\n  //           hand_san: <ExclamationCircleTwoTone twoToneColor='orange' />,\n  //           health_dec_form: <ExclamationCircleTwoTone twoToneColor='orange' />,\n  //         });\n  //       });\n  //       this.setState({\n  //         loading: false,\n  //         data: currentData,\n  //         pagination: {\n  //           total: totalPage,\n  //         },\n  //       });\n  //     });\n  // }\n\n  // sorterFunctionDESC() {\n  //   client\n  //     .query({\n  //       query: gql`\n  //         query {\n  //           companies(orderBy: { field: NAME, order: DESC }, first: 100) {\n  //             paginatorInfo {\n  //               perPage\n  //               hasMorePages\n  //               currentPage\n  //               total\n  //             }\n  //             data {\n  //               id\n  //               name\n  //               rating\n  //               company_parameter_values_for_employee {\n  //                 parameter {\n  //                   role\n  //                   name\n  //                 }\n  //               }\n  //             }\n  //           }\n  //         }\n  //       `,\n  //     })\n  //     .then((result) => {\n  //       console.log(result);\n  //       let totalPage = result.data.companies.paginatorInfo.total;\n  //       let currentData = [];\n  //       result.data.companies.data.forEach((company) => {\n  //         return currentData.push({\n  //           key: company.id,\n  //           rating: company.rating,\n  //           name: company.name,\n  //           therm_screen: <CheckCircleTwoTone twoToneColor='#52c41a' />,\n  //           face_masks: <CheckCircleTwoTone twoToneColor='#52c41a' />,\n  //           hand_san: <ExclamationCircleTwoTone twoToneColor='orange' />,\n  //           health_dec_form: <ExclamationCircleTwoTone twoToneColor='orange' />,\n  //         });\n  //       });\n  //       this.setState({\n  //         loading: false,\n  //         data: currentData,\n  //         pagination: {\n  //           total: totalPage,\n  //         },\n  //       });\n  //     });\n  // }\n\n  // sorter(value) {\n  //   if (value === 'ascend') {\n  //     this.sorterFunctionASC();\n  //   } else if (value === 'descend') {\n  //     this.sorterFunctionDESC();\n  //   }\n  // }\n\n  handleChange = (value) => {\n    this.setState({\n      filteredCols: [\n        ...children.filter((column) => column.title === 'Score'),\n        ...children.filter((column) => column.title === 'Name'),\n        ...children.filter((column) => value.includes(column.key)),\n      ],\n    });\n  };\n\n  // handleOptGrpChange = (value) => {\n  //   this.setState({\n  //     filteredCols: [\n  //       ...children.filter((column) => column.name === 'score'),\n  //       ...children.filter((column) => column.name === 'name'),\n  //       ...children.filter((column) => column.group === value),\n  //     ],\n  //   });\n  // };\n\n  populateBuckets() {\n    client\n      .query({\n        query: gql`\n          query {\n            buckets {\n              id\n              name\n              description\n              parameters {\n                id\n                name\n                category {\n                  name\n                }\n                description\n              }\n            }\n          }\n        `,\n      })\n      .then((result) => {\n        let currentBucket = [];\n        result.data.buckets.forEach((bucket) => {\n          const { id, name } = bucket;\n          const { parameters } = bucket;\n          parameters.forEach((param) =>\n            children.push({\n              key: param.id,\n              title: param.name,\n              dataIndex: param.name.toLowerCase().replace(/[ ]/g, '_'),\n              group: param.name.toLowerCase(),\n              category: param.category.name.toLowerCase(),\n            })\n          );\n          children.forEach((column) => {\n            if (this.state.category === column.category) {\n              this.state.airlineCols.push(column);\n              columnTitles.push(column.title);\n            }\n          });\n          let paramOptions = [];\n          parameters.forEach((param) => {\n            paramOptions.push(<Option key={param.id}>{param.name}</Option>);\n          });\n          currentBucket.push(\n            <OptGroup key={id} label={name}>\n              {paramOptions}\n            </OptGroup>\n          );\n\n          paramOptions = [];\n        });\n        this.setState({\n          buckets: currentBucket,\n          filteredCols: [\n            ...children.filter((column) => column.dataIndex === 'imageurl'),\n            ...children.filter((column) => column.title === 'Name'),\n            ...children.filter((column) => column.title === 'Rating'),\n            ...this.state.airlineCols.slice(0, 5),\n          ],\n          defaultValue: [...columnTitles.slice(0, 5)],\n        });\n      });\n  }\n\n  handleSearch(value) {\n    this.setState({ loading: true });\n\n    // Query\n    const query = gql`\n      query($searchInput: Mixed!) {\n        companies(where: { column: NAME, value: $searchInput }) {\n          data {\n            id\n            name\n            logo\n            rating\n          }\n        }\n      }\n    `;\n\n    client\n      .query({\n        query: query,\n        variables: {\n          searchInput: value,\n        },\n      })\n      .then((result) => {\n        let currentData = [];\n        result.data.companies.data.forEach((company) => {\n          return currentData.push({\n            key: company.id,\n            rating: company.rating,\n            imageurl: company.logo,\n            name: company.name,\n            thermal_screening: <CheckCircleTwoTone twoToneColor='#52c41a' />,\n            face_masks: <CheckCircleTwoTone twoToneColor='#52c41a' />,\n            hand_sanitizer: <ExclamationCircleTwoTone twoToneColor='orange' />,\n            health_dec_form: <ExclamationCircleTwoTone twoToneColor='orange' />,\n          });\n        });\n        this.setState({\n          loading: false,\n          data: currentData,\n        });\n      })\n      .catch((err) => this.loadData());\n  }\n\n  populateCountrySelect() {\n    const query = gql`\n      query {\n        countries {\n          name\n        }\n      }\n    `;\n    client\n      .query({\n        query: query,\n      })\n      .then((result) => {\n        let curCountry = [];\n        result.data.countries.forEach((country, index) => {\n          return curCountry.push(\n            <Option key={index + 1} value={country.name.toLowerCase()}>\n              {country.name}\n            </Option>\n          );\n        });\n        this.setState({\n          countries: [...curCountry],\n        });\n      });\n  }\n\n  countrySearch(value) {\n    this.state.countries.forEach((country) => {\n      if (country.props.value === value) {\n        this.setState({ countries: [country] });\n      }\n    });\n  }\n\n  selectCountrySearch(value) {\n    const query = gql`\n      query($country: Mixed!) {\n        companies(hasCountry: { column: NAME, value: $country }) {\n          data {\n            id\n            name\n            rating\n            logo\n          }\n        }\n      }\n    `;\n\n    client\n      .query({\n        query: query,\n        variables: {\n          country: value,\n        },\n      })\n      .then((result) => {\n        let currentData = [];\n        result.data.companies.data.forEach((company) => {\n          return currentData.push({\n            key: company.id,\n            rating: company.rating,\n            imageurl: company.logo,\n            name: company.name,\n            thermal_screening: <CheckCircleTwoTone twoToneColor='#52c41a' />,\n            face_masks: <CheckCircleTwoTone twoToneColor='#52c41a' />,\n            hand_sanitizer: <ExclamationCircleTwoTone twoToneColor='orange' />,\n            health_dec_form: <ExclamationCircleTwoTone twoToneColor='orange' />,\n          });\n        });\n        this.setState({\n          loading: false,\n          data: currentData,\n        });\n      })\n      .catch((err) => this.loadData());\n  }\n\n  render() {\n    return (\n      <>\n        <Select\n          mode='multiple'\n          style={{ width: '100%', marginBottom: '1em' }}\n          placeholder='Select parameters'\n          onChange={this.handleChange}\n          defaultValue={this.state.defaultValue}\n        >\n          {this.state.buckets}\n        </Select>\n        <Select\n          showSearch\n          style={{ width: 200, marginTop: '1em' }}\n          placeholder='Select country'\n          onSearch={(value) => this.selectCountrySearch(value)}\n        >\n          {this.state.countries}\n        </Select>\n        ,\n        <Input\n          placeholder='Search'\n          bordered={false}\n          style={{ marginBottom: '2em', left: '80%' }}\n          onChange={(e) => this.handleSearch(e.target.value)}\n        />\n        <Table\n          columns={this.state.filteredCols}\n          dataSource={this.state.data}\n          loading={this.state.loading}\n          pagination={this.state.pagination}\n          onChange={(page) => this.handleTableChange(page)}\n        />\n      </>\n    );\n  }\n}\n\nexport default SelectComp;\n\n////\n// <Select\n// placeholder={'Select role'}\n// style={{ width: 200, marginBottom: '2em' }}\n// onChange={this.handleOptGrpChange}\n// >\n// <OptGroup label='COVID-19 Safety Protocols'>\n//   <Option key='face_mask'>Face Mask</Option>\n//   <Option key='therm_screen'>Thermal Screening</Option>\n//   <Option key='hand_sanitizer'>Hand Sanitizer</Option>\n//   <Option key='health_dec_form'>Health Declaration Form</Option>\n// </OptGroup>\n// <OptGroup label='Traveler Convenience'>\n//   <Option value='rebook_pol'>Rebooking Policy</Option>\n// </OptGroup>\n// <OptGroup label='Service Excellence'>\n//   <Option value='face_shields'>Face Shields</Option>\n// </OptGroup>\n// <OptGroup label='Traveler Experience'>\n//   <Option value='onboard_meals'>On Board Meals - Economy</Option>\n// </OptGroup>\n// </Select>\n// ,\n\n// <Select\n//   style={{ width: 120, float: 'right', marginTop: '1em' }}\n//   placeholder='Sort Order'\n//   onChange={(value) => this.sorter(value)}\n// >\n//   <Option value='ascend'>Ascending</Option>\n//   <Option value='descend'>Descending</Option>\n// </Select>\n","import './App.css';\nimport { Layout } from 'antd';\n\nimport HeaderComp from './comps/HeaderComp';\nimport SelectComp from './comps/SelectComp';\n\nconst { Footer, Content } = Layout;\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Layout>\n        <HeaderComp />\n        <Layout>\n          <Layout>\n            <Content style={{ padding: '0 50px' }}>\n              <div className='site-layout-content'>\n                <SelectComp />\n              </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>Safe Travel</Footer>\n          </Layout>\n        </Layout>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}