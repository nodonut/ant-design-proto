{"version":3,"sources":["comps/HeaderComp.js","comps/SelectComp.js","comps/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Layout","Title","Typography","headerStyle","display","justifyContent","alignItems","paddingTop","paddingBottom","currentCategory","HeaderComp","menu","className","Item","onClick","target","style","color","marginTop","src","height","width","theme","mode","defaultSelectedKeys","margin","overlay","e","preventDefault","DownOutlined","client","ApolloClient","uri","cache","InMemoryCache","dataTable","Option","Select","OptGroup","children","key","dataIndex","render","theImageURL","title","sorter","a","b","name","length","sortDirections","rating","curCat","console","log","columnIds","category","defValHolder","SelectComp","state","columns","filteredCols","defaultValue","data","pagination","current","loading","buckets","searchInput","countries","airlineCols","handleChange","value","setState","filter","column","includes","this","loadData","populateBuckets","populateCountrySelect","num","query","gql","variables","page","then","result","currentPage","companies","paginatorInfo","totalPage","total","forEach","company","singleData","id","imageurl","logo","all_company_parameter_values","comp","value_text","parameter","toLowerCase","replace","push","pageSize","currentData","currentBucket","bucket","parameters","param","group","paramOptions","label","slice","catch","err","curCountry","country","index","props","marginBottom","placeholder","onChange","showSearch","onSearch","selectCountrySearch","bordered","left","handleSearch","dataSource","handleTableChange","Component","Footer","Content","App","padding","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f4d4175.chunk.js","sourcesContent":["import React from 'react';\nimport { Menu, Layout, Typography, Dropdown, Image } from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\n\nconst { Header } = Layout;\nconst { Title } = Typography;\n\nconst headerStyle = {\n  display: 'flex',\n  justifyContent: 'flex-start',\n  alignItems: 'center',\n  paddingTop: '2em',\n  paddingBottom: '2em',\n};\n\nlet currentCategory = '';\nexport function HeaderComp() {\n  const menu = (\n    <Menu className={'categories'}>\n      <Menu.Item onClick={(currentCategory = 'Airlines')}>\n        <a target='_blank'>Airlines</a>\n      </Menu.Item>\n      <Menu.Item onClick={(currentCategory = 'Airports')}>\n        <a target='_blank'>Airports</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Hotels</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Mobility</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Activities/Events</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Amusement Parks</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Museums</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Cruises</a>\n      </Menu.Item>\n      <Menu.Item>\n        <a target='_blank'>Short Term Rentals</a>\n      </Menu.Item>\n    </Menu>\n  );\n  return (\n    <Header style={headerStyle}>\n      <Title style={{ color: 'whitesmoke', marginTop: '0.5em' }}>\n        <Image\n          src='https://app.safetravelbarometer.com/images/logos/stb-white-250-63.png'\n          height={40}\n          width={170}\n        />\n      </Title>\n      <Menu\n        theme='dark'\n        mode='horizontal'\n        defaultSelectedKeys={['1']}\n        style={{ margin: '2em 2em' }}\n      >\n        <Menu.Item key='1'>Dashboard</Menu.Item>\n      </Menu>\n      <Dropdown overlay={menu}>\n        <a className='ant-dropdown-link' onClick={(e) => e.preventDefault()}>\n          Categories <DownOutlined />\n        </a>\n      </Dropdown>\n      ,\n    </Header>\n  );\n}\n\nexport function getCategory() {\n  return currentCategory;\n}\n","import React, { Component } from 'react';\nimport { Select, Table, Input, Tooltip } from 'antd';\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport {\n  CheckCircleTwoTone,\n  ExclamationCircleTwoTone,\n} from '@ant-design/icons';\nimport { getCategory } from './HeaderComp';\n\n///////////////////////////\nconst client = new ApolloClient({\n  uri: 'https://dev.app.safetravelbarometer.com/api',\n  cache: new InMemoryCache(),\n});\nconst dataTable = [];\n\n///////////////////////////\nconst { Option, OptGroup } = Select;\n\nconst children = [\n  {\n    key: '01',\n    dataIndex: 'imageurl',\n    render: (theImageURL) => <img src={theImageURL} height={50} width={50} />,\n  },\n  {\n    key: '02',\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.length - b.name.length,\n    sortDirections: ['descend'],\n  },\n  {\n    key: '03',\n    title: 'Rating',\n    dataIndex: 'rating',\n    sorter: (a, b) => a.rating - b.rating,\n    sortDirections: ['descend'],\n  },\n];\n\nlet curCat = getCategory();\nconsole.log(curCat);\n\nconst paramContainer = [];\nlet columnIds = [];\nlet pageNumber = 1;\nlet category = 'Airlines';\nlet defValHolder = [];\n\nclass SelectComp extends Component {\n  state = {\n    columns: [...children],\n    filteredCols: [],\n    defaultValue: [...defValHolder],\n    columnIds,\n    data: [],\n    pagination: {\n      current: 1,\n    },\n    loading: false,\n    buckets: [],\n    searchInput: '',\n    countries: [],\n    category,\n    airlineCols: [],\n  };\n\n  componentDidMount() {\n    this.loadData();\n    this.populateBuckets();\n    this.populateCountrySelect();\n    this.setState({ defaultValue: [...columnIds] });\n  }\n\n  loadData(num = 1) {\n    this.setState({ loading: true });\n    const query = gql`\n      query companies($page: Int!, $category: Mixed!) {\n        companies(\n          page: $page\n          first: 100\n          hasCategory: { column: NAME, value: $category }\n        ) {\n          paginatorInfo {\n            perPage\n            hasMorePages\n            currentPage\n            total\n          }\n          data {\n            id\n            name\n            logo\n            rating\n            category {\n              id\n              name\n            }\n            all_company_parameter_values {\n              parameter {\n                name\n                id\n              }\n              value\n              value_text\n            }\n          }\n        }\n      }\n    `;\n    client\n      .query({\n        query: query,\n        variables: {\n          page: num,\n          category: this.state.category,\n        },\n      })\n      .then((result) => {\n        console.log(result);\n        let currentPage = result.data.companies.paginatorInfo.currentPage;\n        let totalPage = result.data.companies.paginatorInfo.total;\n        result.data.companies.data.forEach((company) => {\n          if (company.category.name === this.state.category) {\n            let singleData = {\n              key: company.id,\n              rating: company.rating,\n              imageurl: company.logo,\n              name: company.name,\n              category: company.category.name,\n            };\n            const { all_company_parameter_values } = company;\n            let value = '';\n            let valueText;\n            all_company_parameter_values.forEach((comp) => {\n              value = comp.value;\n              valueText = comp.value_text;\n              singleData[\n                comp.parameter.name.toLowerCase().replace(/[ ]/g, '_')\n              ] = value;\n            });\n            return dataTable.push(singleData);\n          }\n        });\n        this.setState({\n          loading: false,\n          data: dataTable,\n          pagination: {\n            current: currentPage,\n            total: totalPage,\n          },\n        });\n      });\n  }\n\n  handleTableChange(page) {\n    console.log(page);\n    const query = gql`\n      query companies($page: Int!, $pageSize: Int!, $category: Mixed!) {\n        companies(\n          page: $page\n          first: $pageSize\n          hasCategory: { column: NAME, value: $category }\n        ) {\n          paginatorInfo {\n            perPage\n            hasMorePages\n            currentPage\n            total\n          }\n          data {\n            id\n            name\n            logo\n            rating\n            category {\n              id\n              name\n            }\n            all_company_parameter_values {\n              parameter {\n                name\n                id\n              }\n              value\n              value_text\n            }\n          }\n        }\n      }\n    `;\n    client\n      .query({\n        query: query,\n        variables: {\n          page: page.current,\n          pageSize: page.pageSize,\n          category: this.state.category,\n        },\n      })\n      .then((result) => {\n        let totalPage = result.data.companies.paginatorInfo.total;\n        let currentPage = result.data.companies.paginatorInfo.currentPage;\n        let currentData = [];\n        result.data.companies.data.forEach((company) => {\n          if (company.category.name === this.state.category) {\n            let singleData = {\n              key: company.id,\n              rating: company.rating,\n              imageurl: company.logo,\n              name: company.name,\n              category: company.category.name,\n            };\n            const { all_company_parameter_values } = company;\n            let value = '';\n            let valueText;\n            all_company_parameter_values.forEach((comp) => {\n              value = comp.value;\n              valueText = comp.value_text;\n              singleData[\n                comp.parameter.name.toLowerCase().replace(/[ ]/g, '_')\n              ] = value;\n            });\n            return currentData.push(singleData);\n          }\n        });\n        this.setState({\n          loading: false,\n          data: currentData,\n          pagination: {\n            current: currentPage,\n            total: totalPage,\n          },\n        });\n      });\n  }\n\n  handleChange = (value) => {\n    console.log(value);\n    this.setState({\n      filteredCols: [\n        ...children.filter((column) => column.dataIndex === 'imageurl'),\n        ...children.filter((column) => column.title === 'Name'),\n        ...children.filter((column) => column.title === 'Rating'),\n        ...children.filter((column) => value.includes(column.key)),\n      ],\n    });\n  };\n\n  populateBuckets() {\n    client\n      .query({\n        query: gql`\n          query {\n            buckets {\n              id\n              name\n              description\n              parameters {\n                id\n                name\n                category {\n                  id\n                  name\n                }\n                description\n              }\n            }\n          }\n        `,\n      })\n      .then((result) => {\n        let currentBucket = [];\n        result.data.buckets.forEach((bucket) => {\n          const { id, name } = bucket;\n          const { parameters } = bucket;\n          parameters.forEach((param) => {\n            if (param.category.name === this.state.category) {\n              children.push({\n                key: param.id,\n                title: param.name,\n                dataIndex: param.name.toLowerCase().replace(/[ ]/g, '_'),\n                group: param.name.toLowerCase(),\n                category: param.category.name,\n              });\n            }\n          });\n\n          children.forEach((column) => {\n            if (\n              column.category === this.state.category &&\n              defValHolder.length < 6\n            ) {\n              defValHolder.push(column.key);\n            }\n          });\n\n          let paramOptions = [];\n          parameters.forEach((param) => {\n            paramOptions.push(\n              <Option key={param.id} value={param.id}>\n                {param.name}\n              </Option>\n            );\n          });\n          currentBucket.push(\n            <OptGroup key={id} label={name}>\n              {paramOptions}\n            </OptGroup>\n          );\n\n          paramOptions = [];\n        });\n\n        this.setState({\n          buckets: currentBucket,\n          filteredCols: [\n            ...children.slice(0, 3),\n            ...children.filter((column) => defValHolder.includes(column.key)),\n          ],\n        });\n      });\n  }\n\n  handleSearch(value) {\n    this.setState({ loading: true });\n\n    // Query\n    const query = gql`\n      query($searchInput: Mixed!, $category: Mixed!) {\n        companies(\n          where: { column: NAME, value: $searchInput }\n          hasCategory: { column: NAME, value: $category }\n        ) {\n          data {\n            id\n            name\n            logo\n            rating\n            category {\n              id\n              name\n            }\n            all_company_parameter_values {\n              parameter {\n                name\n                id\n              }\n              value\n              value_text\n            }\n          }\n        }\n      }\n    `;\n\n    client\n      .query({\n        query: query,\n        variables: {\n          searchInput: value,\n          category: category,\n        },\n      })\n      .then((result) => {\n        let currentData = [];\n        result.data.companies.data.forEach((company) => {\n          let singleData = {\n            key: company.id,\n            rating: company.rating,\n            imageurl: company.logo,\n            name: company.name,\n            category: company.category.name,\n          };\n          if (company.category.name === this.state.category) {\n            const { all_company_parameter_values } = company;\n            let value = '';\n            all_company_parameter_values.forEach((comp) => {\n              value = comp.value;\n              singleData[\n                comp.parameter.name.toLowerCase().replace(/[ ]/g, '_')\n              ] = value;\n            });\n            return currentData.push(singleData);\n          }\n        });\n        this.setState({\n          loading: false,\n          data: currentData,\n        });\n      })\n      .catch((err) => this.loadData());\n  }\n\n  populateCountrySelect() {\n    const query = gql`\n      query {\n        countries {\n          name\n        }\n      }\n    `;\n    client\n      .query({\n        query: query,\n      })\n      .then((result) => {\n        let curCountry = [];\n        result.data.countries.forEach((country, index) => {\n          return curCountry.push(\n            <Option key={index + 1} value={country.name.toLowerCase()}>\n              {country.name}\n            </Option>\n          );\n        });\n        this.setState({\n          countries: [...curCountry],\n        });\n      });\n  }\n\n  countrySearch(value) {\n    this.state.countries.forEach((country) => {\n      if (country.props.value === value) {\n        this.setState({ countries: [country] });\n      }\n    });\n  }\n\n  selectCountrySearch(value) {\n    const query = gql`\n      query($country: Mixed!, $category: Mixed!) {\n        companies(\n          hasCountry: { column: NAME, value: $country }\n          hasCategory: { column: NAME, value: $category }\n        ) {\n          data {\n            id\n            name\n            rating\n            logo\n            category {\n              id\n              name\n            }\n            all_company_parameter_values {\n              parameter {\n                name\n                id\n              }\n              value\n              value_text\n            }\n          }\n        }\n      }\n    `;\n\n    client\n      .query({\n        query: query,\n        variables: {\n          country: value,\n          category: this.state.category,\n        },\n      })\n      .then((result) => {\n        let currentData = [];\n        result.data.companies.data.forEach((company) => {\n          let singleData = {\n            key: company.id,\n            rating: company.rating,\n            imageurl: company.logo,\n            name: company.name,\n            category: company.category.name,\n          };\n          if (company.category.name === this.state.category) {\n            const { all_company_parameter_values } = company;\n            let value = '';\n            let valueText = '';\n            all_company_parameter_values.forEach((comp) => {\n              value = comp.value;\n              valueText = comp.value_text;\n              singleData[\n                comp.parameter.name.toLowerCase().replace(/[ ]/g, '_')\n              ] = value;\n            });\n            return currentData.push(singleData);\n          }\n        });\n        this.setState({\n          loading: false,\n          data: currentData,\n        });\n      })\n      .catch((err) => this.loadData());\n  }\n\n  render() {\n    return (\n      <>\n        <Select\n          mode='multiple'\n          style={{ width: '100%', marginBottom: '1em' }}\n          placeholder='Select parameters'\n          onChange={this.handleChange}\n          defaultValue={defValHolder}\n        >\n          {this.state.buckets}\n        </Select>\n        <Select\n          showSearch\n          style={{ width: 200, marginTop: '1em' }}\n          placeholder='Select country'\n          onSearch={(value) => this.selectCountrySearch(value)}\n        >\n          {this.state.countries}\n        </Select>\n        ,\n        <Input\n          placeholder='Search'\n          bordered={false}\n          style={{ marginBottom: '2em', left: '80%' }}\n          onChange={(e) => this.handleSearch(e.target.value)}\n        />\n        <Table\n          columns={this.state.filteredCols}\n          dataSource={this.state.data}\n          loading={this.state.loading}\n          pagination={this.state.pagination}\n          onChange={(page) => this.handleTableChange(page)}\n        />\n      </>\n    );\n  }\n}\n\nexport default SelectComp;\n\n////\n// <Select\n// placeholder={'Select role'}\n// style={{ width: 200, marginBottom: '2em' }}\n// onChange={this.handleOptGrpChange}\n// >\n// <OptGroup label='COVID-19 Safety Protocols'>\n//   <Option key='face_mask'>Face Mask</Option>\n//   <Option key='therm_screen'>Thermal Screening</Option>\n//   <Option key='hand_sanitizer'>Hand Sanitizer</Option>\n//   <Option key='health_dec_form'>Health Declaration Form</Option>\n// </OptGroup>\n// <OptGroup label='Traveler Convenience'>\n//   <Option value='rebook_pol'>Rebooking Policy</Option>\n// </OptGroup>\n// <OptGroup label='Service Excellence'>\n//   <Option value='face_shields'>Face Shields</Option>\n// </OptGroup>\n// <OptGroup label='Traveler Experience'>\n//   <Option value='onboard_meals'>On Board Meals - Economy</Option>\n// </OptGroup>\n// </Select>\n// ,\n\n// <Select\n//   style={{ width: 120, float: 'right', marginTop: '1em' }}\n//   placeholder='Sort Order'\n//   onChange={(value) => this.sorter(value)}\n// >\n//   <Option value='ascend'>Ascending</Option>\n//   <Option value='descend'>Descending</Option>\n// </Select>\n","import React, { useState, useEffect } from 'react';\nimport { Select, Table, Input, Layout } from 'antd';\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport {\n  CheckCircleTwoTone,\n  ExclamationCircleTwoTone,\n} from '@ant-design/icons';\n\n//------------------------------------\nconst client = new ApolloClient({\n  uri: 'https://dev.app.safetravelbarometer.com/api',\n  cache: new InMemoryCache(),\n});\n//------------------------------------\n\nconst { Header, Footer, Content } = Layout;\n\nexport default function Dashboard() {\n  return (\n    <>\n      <Layout>\n        <Content>Content</Content>\n      </Layout>\n    </>\n  );\n}\n","import './App.css';\nimport { Layout } from 'antd';\n\nimport { HeaderComp } from './comps/HeaderComp';\nimport SelectComp from './comps/SelectComp';\nimport Dashboard from './comps/Dashboard';\n\nconst { Footer, Content } = Layout;\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Layout>\n        <HeaderComp />\n        <Layout>\n          <Layout>\n            <Content style={{ padding: '0 50px' }}>\n              <div className='site-layout-content'>\n                <SelectComp />\n              </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>Safe Travel</Footer>\n          </Layout>\n        </Layout>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}